[
{
	"uri": "https://kbatuigas.github.io/content-guide-template/01-tldr/",
	"title": "TL;DR",
	"tags": [],
	"description": "",
	"content": "This Content Guide goes into depth on many subjects. It may be more information than you need. Here are the most important things to know.\nPrinciples Good content is:\n Clear Useful Friendly Appropriate  Voice and tone Crunchy Data’s voice is:\n          Our priorities are to educate our users about our products without patronizing or confusing them, so they can get their work done and get on with their lives.\nWriting about people We write and build apps with a person-first perspective. Being aware of the impact of your language will help make Crunchy a better place to work and a better steward of our values in the world.\n Don’t reference age or disability unless it’s relevant to what you’re writing. Avoid gendered language and use the singular “they.” When writing about a person, use their preferred pronouns; if you don’t know those, just use their name.  Related resource: The Conscious Style Guide.\nGrammar and mechanics  Some people will read every word you write. Others will just scan. Help everyone by grouping related ideas together and using descriptive headers and subheaders. Focus your message, and create a hierarchy of information. Lead with the main point or the most important content. Use active voice and positive language. Use short words and sentences. Avoid unnecessary modifiers. Use specific examples. Avoid vague language. Be consistent. Adhere to the copy patterns and style points outlined in this guide. Feel free to use contractions. Use the serial comma. Otherwise, use common sense. Don’t use underline, and don’t use any combination of italic, bold, caps, and underline. When in doubt, read your writing out loud.  Web elements  Organize your page around one topic. Use clear, descriptive terms that relate to the topic in titles and headings. Give every image descriptive alt text. Use title case for main navigation. Use sentence case for subnavigation. Use title case for headings and sentence case for subheadings. Organize headings and subheadings in a hierarchy, with heading first, followed by subheadings in order. Include the most relevant keywords in your headings and subheadings. Provide a link whenever you’re referring to a website, relevant content, and trusted external resources. Don’t say things like “Click here!” or “Click for more information” or “Read this.” Instead, link relevant keywords. Use lists to present steps, groups, or sets of info. Set up your list with a brief introduction. Number lists when the order of information is important.  Writing for accessibility  Create a hierarchy, with the most important information first. Place similar topics in the same paragraph, and clearly separate different topics with headings. Use plain language. Write short sentences and familiar words. Links should provide information on the associated action or destination. Avoid saying “click here” or “learn more.” Avoid using images when descriptive text will do. Avoid directional instructions or language that requires the reader to see the layout or design of the page.  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/02-writing-principles/",
	"title": "Writing Goals and Principles",
	"tags": [],
	"description": "",
	"content": "With every piece of content we publish, we aim to:\n  Empower. Help people understand Crunchy Data by using language that informs them and encourages them to make the most of our products.\n  Respect. Treat readers with the respect they deserve. Put yourself in their shoes, and don’t patronize them. Remember that they have other things to do. Be considerate and inclusive. Don’t market at people; communicate with them.\n  Educate. Tell readers what they need to know, not just what we want to say. Give them the exact information they need, along with opportunities to learn more. Remember that you’re the expert, and readers don’t have access to everything you know.\n  Guide. Think of yourself as a tour guide for our readers. Whether you’re leading them through our educational materials or a task in our products, communicate in a friendly and helpful way.\n  Speak truth. Understand Crunchy's place in our users’ lives. Avoid dramatic storytelling and grandiose claims. Focus on our real strengths.\n  In order to achieve those goals, we make sure our content is:\n  Clear. Understand the topic you’re writing about. Use simple words and sentences.\n  Useful. Before you start writing, ask yourself: What purpose does this serve? Who is going to read it? What do they need to know?\n  Friendly. Write like a human. Don’t be afraid to break a few rules if it makes your writing more relatable. All of our content, from product documentation to blog posts, should be warm and human.\n  Appropriate. Write in a way that suits the situation. Just like you do in face-to-face conversations, adapt your tone depending on who you’re writing to and what you’re writing about.\n  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/03-voice-and-tone/",
	"title": "Voice and Tone",
	"tags": [],
	"description": "",
	"content": "One way we write empowering content is by being aware of our voice and our tone. This section explains the difference between voice and tone, and lays out the elements of each as they apply to Crunchy.\nWhat’s the difference between voice and tone? Think of it this way: You have the same voice all the time, but your tone changes. You might use one tone when you're out to dinner with your closest friends, and a different tone when you're in a meeting with your boss.\nYour tone also changes depending on the emotional state of the person you’re addressing. You wouldn’t want to use the same tone of voice with someone who’s scared or upset as you would with someone who’s laughing.\nVoice At Crunchy, we’ve walked in our customers\u0026rsquo; shoes, and we know PostgreSQL and its related technologies can be a minefield of confusing terminology. That’s why we speak like the experienced and compassionate business partner we wish we’d had way back when.\nWe treat every user seriously. We want to educate people without patronizing or confusing them.\nWhether people know what they need from us or don’t know the first thing about Postgres, every word we say informs and encourages. We impart our expertise with clarity and empathy.\nAll of this means that when we write content:\n  We are plainspoken. We value clarity above all. Because businesses come to Crunchy to get to work, we avoid distractions like fluffy metaphors and cheap plays to emotion.\n  We are genuine. We relate to customers’ challenges and passions and speak to them in a familiar, warm, and accessible way.\n  We are translators. Only experts can make what’s difficult look easy, and it’s our job to demystify database- and open source-speak and actually educate.\n  Tone When you’re writing, consider the reader’s state of mind. Once you have an idea of their emotional state, you can adjust your tone accordingly.\nIt's all right to be funny when it’s appropriate and when it comes naturally to you. But don’t go out of your way to make a joke—forced humor can be worse than none at all. If you’re unsure, keep a straight face.\nStyle tips Here are a few key elements of writing Crunchy’s voice. For more, see the Grammar and mechanics section (forthcoming).\n Active voice: Use active voice. Avoid passive voice. Avoid slang and jargon: Write in plain English. Write positively: Use positive language rather than negative language.  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/04-writing-about-people/",
	"title": "Writing About People",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/05-grammar-and-mechanics/",
	"title": "Grammar and Mechanics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/06-web-elements/",
	"title": "Web Elements",
	"tags": [],
	"description": "",
	"content": "Every piece of content we publish is supported by a number of smaller pieces. This section lays out our style in regards to these web elements, and explains our approach to the tricky art of SEO.\nGuidelines Alt text Alt text is a way to label images, and it's especially important for people who can’t see the images on our website. Alt text should describe the image in a brief sentence or two.\nFor more on how and why we use alt text, read the Accessibility section.\nHeadings and subheadings ***Making content \u0026ldquo;shareable\u0026rdquo; also goes under here? (e.g. anchor links for headers?)\nHeadings and subheadings organize content for readers and make it scannable, like a newspaper. Be generous and descriptive.\nHeadings (H1) give people a taste of what they’re about to read. Use them for page and blog titles.\nSubheadings (H2, H3, etc.) break pages into smaller, more specific sections. They give readers avenues into your content and make it more scannable.\nHeadings and subheadings should be organized in a hierarchy, with heading first, followed by subheadings in order. (An H2 will nestle under H1, an H3 under H2, and on down.)\nInclude the most relevant keywords in your headings and subheadings, and make sure you cover the main point of the content.\nUse title case, unless the heading is a punctuated sentence. If the heading is a punctuated sentence, use sentence case. Use sentence case for subheadings regardless of end punctuation.\nLinks Provide a link whenever you’re referring to something on an external website. Use links to point users to relevant content and trusted external resources.\nDon’t include preceding articles (a, an, the, our) when you link text. For example:\n Yes: Read the user guide for details. No: Read the user guide for details.  If a link comes at the end of a sentence or before a comma, don’t link the punctuation mark.\nDon’t say things like “Click here!” or “Click for more information” or “Read this.” Write the sentence as you normally would, and link relevant keywords.\nLinks should look different than regular copy, strong text, or emphasis text. They should have a hover state that communicates they’re interactive, and should have a distinct active and visited state. When setting the hover state of links, be sure to include focus state as well, to help readers using assistive technologies and touch devices.\nLists Use lists to present steps, groups, or sets of information. Give context for the list with a brief introduction. Number lists when the order is important, like when you’re describing steps of a process. Don’t use numbers when the list’s order doesn’t matter.\nIf one of the list items is a complete sentence, use proper punctuation and capitalization on all of the items. If list items are not complete sentences, don’t use punctuation, but do capitalize the first word of each item.\nNavigation Use title case for main or global navigation. Use sentence case for subnavigation.\nNavigation links should be clear and concise.\nRadio Buttons Use title case for headings and sentence case for button fields.\nRelated articles Sometimes a long piece of copy lends itself to a list of related links at the end. Don’t go overboard—4 is usually plenty.\nRelated articles should appear in a logical order, following the step down/step up rule: The first article should be a step down in complexity from the current article. The second one should be a step up in complexity to a more advanced article.\nIf you can, avoid repeating links from the body text in related articles.\nTitles Titles organize pages and guide readers. A title appears at the beginning of a page or section and briefly describes the content that follows.\nTitles are (you guessed it) in title case.\nDon’t use punctuation in a title unless the title is a question.\nSEO We write for humans, not machines. While we wouldn't want to resort to keyword stuffing just to bump up search results, we also want to make it easy for people and search engines to find and share our content. Here are some not-icky ways to do this:\n  Organize your page around one topic. Use clear, descriptive terms in titles and headings that relate to the topic at hand.\n  Use descriptive headings to structure your page and highlight important information.\n  Give every image descriptive alt text.\n  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/07-writing-technical-content/",
	"title": "Writing Technical Content",
	"tags": [],
	"description": "",
	"content": "At Crunchy, technical content appears primarily in our Access portal, our project repositories, our blog, and our interactive Learning Portal. This section will lay out the guiding principles of technical content, briefly discuss the main types of technical content, and outline the process of writing and editing technical articles.\nBasics Someone reading technical content is usually looking to answer a specific question. That question might be broad or narrowly focused, but either way our goal is to provide answers without distraction.\nFor each project, consider your audience’s background, goal, and current mood. Ask these questions:\n Is the reader a prospective user, a new user, or an experienced user? What is the goal of the user? To complete a task? To research a topic? Is the user in the middle of a task? Are they in a hurry? Could they be frustrated?  We don’t want to overload our audience with unnecessary information, choices, or complex ideas or phrases when we don’t have to. This is particularly critical when a user may be new and/or frustrated.\nWhen relevant, provide a brief outline of an article’s focus in an introductory paragraph or section, and stick to the topic at hand. Keep sentences, paragraphs, and procedural steps focused and concise.\nTypes of technical content Technical content articles vary in target audience, goal, and tone. Here are the main types of technical content we create:\n   Type User Goal     Documentation\n- Reference guide\n- User guide\n- README prospective, new, intermediate, advanced Helps the reader understand what the product does, and how to use it.\n- Reference guide: - User guide: Provide a high-level explanation of what the feature is, how it works, and its benefit to the user. Walks through installation, deployment, and usage. Include links to relevant tutorials.\n- README: Explains what the project is, and how to use it.   Blog post     Learning portal course\n(learn.crunchydata.com) prospective, new, intermediate     Some general guidelines are described below. For guidelines specific to a type of article, check out the relevant page using the navigation menu.\nGuidelines Writing technical content When writing technical content, follow the style points outlined in the Voice and tone and Grammar and mechanics*** sections. Here are some other goals and pointers to keep in mind.\nStay relevant to the title When a user clicks the title of an article, they expect to find the answer they want. Don’t stray too far from the title or topic at hand. Use links to make related content available. If you find you’re getting too far from the intended topic, then you may need to create a separate but related article.\nKeep headlines and paragraphs short and scannable Focused users often scan an article for the part that will answer their particular question. Be sure headings are short, descriptive, and parallel, to facilitate scanning.\nUse second person and describe actions to a user Technical content talks to users when support agents can’t.\nStrive for simplicity and clarity Be as clear as possible. Use simple words and phrases, avoid gerunds and hard-to-translate idioms or words, focus on the specific task, limit the number of sentences per paragraph. If you must include edge cases or tangentially related information, set it aside in a Before You Start list or Notes field.\nProvide context through embedded screenshots, videos, and GIFs Screenshots, videos, and GIFs may not be necessary for every article or process, but can be helpful to orient new users. Crop screenshots tightly around the action to focus attention.\nFormatting technical content Technical content uses organization, capitalization, and other formatting to help convey meaning. Although blog articles are organized differently, some formatting tips are consistent throughout all technical content.\nCapitalization Capitalize proper names of Crunchy Data products, features, pages, tools, and teams when directly mentioned.\nIn step-by-step instructions, capitalize and bold navigation and button labels as they appear in the app.\n   Headings Organize content with H2s and H3s. Use H2s for higher-level topics or goals, and use H3s within each section for supporting information or tasks.\nName or Title:\n H2: H2: H2:  H3: H3: H3:    Ordered Lists Only use ordered lists for step-by-step instructions. Separate steps into logical chunks, with no more than 2 related actions per step. When additional explanation or a screenshot is necessary, use a line break inside the list item.\nUnordered Lists Use unordered lists to display examples or multiple notes. If an unordered list comprises more than 10 items, use a table instead.\n"
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/08-writing-user-guides/",
	"title": "Writing User Guides",
	"tags": [],
	"description": "",
	"content": "When do we write user guides? Who are they for?\nGuidelines "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/09-writing-readmes/",
	"title": "Writing READMEs",
	"tags": [],
	"description": "",
	"content": "A README is a single file (typically .txt, or .md) that introduces the reader to the project repository. Like user guides, a README informs the reader what a project is for and how to use it. However, it could also contain additional information such as acknowledgements (project contributors), license, etc.\nGuidelines "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/10-writing-blog-posts/",
	"title": "Writing Blog Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/11-writing-for-the-learning-portal/",
	"title": "Writing for the Learning Portal",
	"tags": [],
	"description": "",
	"content": "The Crunchy Data Learning Portal contains interactive tutorials for learning PostgreSQL. It provides a complete learning environment where the uesr can focus on \u0026ldquo;learning by doing\u0026rdquo; without needing to worry about setting up their own apps, utilities, etc. The learning portal is powered by Katacoda.\nGuidelines "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/12-writing-for-accessibility/",
	"title": "Writing for Accessibility",
	"tags": [],
	"description": "",
	"content": "We’re always working to make our content more accessible and usable to the widest possible audience. Writing for accessibility goes way beyond making everything on the page available as text. It also affects the way you organize content and guide readers through a page. Depending on the audience and country, there may be laws governing the level of accessibility required. At minimum, an accessible version should be available. Accessibility includes users of all mental and physical capacities, whether situational (broken glasses!) or more permanent.\nBasics We write for a diverse audience of readers who all interact with our content in different ways. We aim to make our content accessible to anyone using a screen reader, keyboard navigation, or Braille interface, and to users of all cognitive capabilities.\nAs you write, consider the following:\n Would this language make sense to someone who doesn’t work here? Could someone quickly scan this document and understand the material? If someone can’t see the colors, images or video, is the message still clear? Is the markup clean and structured? Mobile devices with accessibility features are increasingly becoming core communication tools, does this work well on them?  Many of the best practices for writing for accessibility echo those for writing technical content, with the added complexity of markup, syntax, and structure.\nGuidelines Avoid directional language Avoid directional instructions and any language that requires the reader to see the layout or design of the page. This is helpful for many reasons, including layout changes on mobile.\n Yes: “Select from these options,” (with the steps listed after the title) No: “Select from the options in the right sidebar.”  Use headers Headers should always be nested and consecutive. Never skip a header level for styling reasons. To help group sections, be sure the page title is H1, top-level sections are H2s, and subsequent inside those are H3 and beyond. Avoid excessive nesting.\nEmploy a hierarchy Put the most important information first. Place similar topics in the same paragraph, and clearly separate different topics with headings.\nStarting with a simple outline that includes key messages can help you create a hierarchy and organize your ideas in a logical way. This improves scannability and encourages better understanding.\nMake true lists instead of using a paragraph or line breaks.\nUse descriptive links Links should provide information on the associated action or destination. Try to avoid “click here” or “learn more.”\nUse plain language Write short sentences and use familiar words. Avoid jargon and slang. If you need to use an abbreviation or acronym that people may not understand, explain what it means on first reference.\nUse alt text The alt tag is the most basic form of image description, and it should be included on all images. The language will depend on the purpose of the image:\n If it’s a creative photo or supports a story, describe the image in detail in a brief caption. If the image is serving a specific function, describe what’s inside the image in detail. People who don’t see the image should come away with the same information as if they had. If you’re sharing a chart or graph, include the data in the alt text so people have all the important information.  Each browser handles alt tags differently. Supplement images with standard captions when possible.\nMake sure closed captioning is available Closed captioning or transcripts should be available for all videos. The information presented in videos should also be available in other formats.\nBe mindful of visual elements Aim for high contrast between your font and background colors. Tools in the resources section should help with picking accessible colors.\nImages should not be the only method of communication, because images may not load or may not be seen. Avoid using images when the same information could be communicated in writing.\nResources  Accessibility cheatsheet 18F Accessibility Guide Designing for Screen Reader Compatibility Accessible color combinations WAVE Web Accessibility Evaluation Tool  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/13-word-list/",
	"title": "Word List",
	"tags": [],
	"description": "",
	"content": "These words can be slippery. Here’s how we write them. (If it’s not on this list, defer to the AP Style Guide.)\n   Words to avoid  master/slave (we use primary/replica) automagical funnel, incentivize, leverage, disruption, thought leader, or other fluffy corporate terms internets, interwebs, or any other variation of the word “internet” ninja, rockstar, wizard, unicorn (unless referring to a literal ninja, rockstar, wizard, or unicorn) young, old, elderly, or any other word describing a person's age  crazy, insane, or similar words to describe people  "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/14-further-reading/",
	"title": "Further Reading",
	"tags": [],
	"description": "",
	"content": "This guide is based on the work done by Mailchimp on their style guide. (Here's the style guide repository on GitHub.)\nWe also love these style guides:\n18F Content Guide\nBuzzfeed Style Guide\nA List Apart Style Guide\nThese resources were also helpful to us:\nAccessibility Cheatsheet\n18F Accessibility Guide\nDesigning for Screen Reader Compatibility\nAccessible Color Combinations\nWAVE Web Accessibility Evaluation Tool\nThe Conscious Style Guide\nGLAAD Media Reference Guide\n"
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/15-helpful-tools/",
	"title": "Helpful Tools",
	"tags": [],
	"description": "",
	"content": " text editor extensions (e.g. markdown linters) accessibility checkers   "
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/_header/",
	"title": "_Header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/",
	"title": "Content Guide Template",
	"tags": [],
	"description": "",
	"content": "Welcome to the Crunchy Content Guide This is our company content guide. It helps us write clear and consistent content across teams and channels. Please use it as a reference when you’re writing for Crunchy Data.\nThis guide is based on the Mailchimp Content Style Guide (© Mailchimp 2019). The Mailchimp Content Style Guide project repository can be found on GitHub and is available under a Creative Commons Attribution-NonCommercial 4.0 International License.\n"
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kbatuigas.github.io/content-guide-template/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]